{
  "name": "furious",
  "version": "0.2.1",
  "description": "Develop command line tools furiously",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/scriptnull/furious.git"
  },
  "keywords": [
    "command",
    "cli",
    "commandline",
    "commander"
  ],
  "author": {
    "name": "Vishnu Bharathi",
    "email": "vishnubharathi04@gmail.com",
    "url": "https://twitter.com/scriptnull"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/scriptnull/furious/issues"
  },
  "homepage": "https://github.com/scriptnull/furious",
  "devDependencies": {
    "mocha": "2.2.5"
  },
  "readme": "Meet __furious__ - [commander](https://www.npmjs.com/package/commander) inspired elegant solution for creating command line tools.\r\n\r\n[![Build Status](https://travis-ci.org/scriptnull/furious.svg?branch=master)](https://travis-ci.org/scriptnull/furious)\r\n\r\n__furious__ is ultra __lightweight__ and __less than 100 lines of code__. The API is dead simple and have been modified from commander to make few things simpler.\r\n\r\n\r\nInstallation\r\n============\r\n```bash \r\nnpm install furious --save\r\n```\r\n\r\nAPI\r\n===\r\n### furious\r\n```javascript\r\nvar furious = require('furious');\r\n//add commands and options here \r\nfurious.execute(process.argv , 'Tool for doing string operations'); //execute the user given command.  \r\n```\r\n> __NOTE__ : Don't forget to call furious.execute() at the end. It is responsible for executing the user command.\r\n\r\n### .command(commandName , description , callback)\r\nCreate a command with this function.\r\n- commandName `string` - Command Name. \r\n- decription `string` - Description for the Command.\r\n- callback `function(args)` - function to be executed when command is given in the command line. _args_ - array of arguments.\r\n- Example : `programname upper hello` - Here _upper_ is the Command name and _hello_ is available in _args_ of the callback.\r\n\r\n```javascript\r\nfurious\r\n  .command('upper' , 'print upper case values' , function(args){\r\n    var firstArg = args[0];\r\n    console.log(firstArg.toUpperCase());\r\n  });\r\n```\r\n\r\n### .option(optionNamesArray , description , callback)\r\nCreate options for already existing command.\r\n- optionNamesArray `array` - Option names. Each option name __should start with - or --__\r\n- description `array` - Description about the Option.\r\n- callback `function(args)` - function to be executed when option is given in the command line. _args_ - array of arguments.\r\n- Example : `programname upper -h` - Here _upper_ is Command name and _-h_ is the option.\r\n\r\n```javascript\r\nfurious\r\n  .command('upper' , 'print upper case values' , function(args){\r\n    var firstArg = args[0];\r\n    console.log(firstArg.toUpperCase());\r\n  })\r\n  .option(['-h' ,'--help'] , 'Help for Upper' , function(args){\r\n    console.log('You can provide help for this command here.');\r\n  });\r\n```\r\nIn this case ,both  ``programname upper -h`` and  ``programname upper --help`` invoke the same callback.\r\n\r\n### .alias( aliasArray )\r\nSpecify Alias for commands.\r\n```javascript\r\nfurious\r\n  .command('upper' , 'print upper case values' , function(args){\r\n    var firstArg = args[0];\r\n    console.log(firstArg.toUpperCase());\r\n  })\r\n  .alias(['up' , 'u']);\r\n```\r\n\r\n### .execute(argv , description , noCommandOrOptionOperation , commonOperation)\r\nThis is where the user given command on the terminal is parsed and executed. \r\n- argv `array` - send in __process.argv__ to execute the command given by user.\r\n- description `string` - Description of the command line tool.\r\n- noCommandOrOptionOperation `function()` - function to be executed when there is no commands given by user or the command definition is not available.\r\n- commonOperation `function(argv)` - function to be executed commonly for all the commands. Eg. You may instantiate timers for measuring the performance of your utility here.\r\n\r\n```javascript\r\nvar noCommandOrOptionOperation = function(){ console.log('Please Specify a Command or Option'); };\r\nvar commonOperation = function(argv){console.log('Welcome to the cli');};\r\n\r\nfurious.execute(process.argv , 'Cli for something' , noCommandOrOptionOperation , commonOperation );\r\n```\r\nExpect for a `printHelp` function in future versions , that can be easily used in _noCommandOrOptionOperation_ and _commonOperation_.\r\n\r\nCaveats\r\n=======\r\n- If definition for a command is specified twice then , first definition will be considered and rest are rejected.\r\n- The package is in beta phase and has few things left behind to do. So watch out for version 1.0.0 , until then , try to play around with it.\r\n\r\nContribution\r\n============\r\nMore than welcomed. Feel free to send in a pull request or file an issue.\r\n\r\nLicense\r\n=======\r\n[The MIT License](https://github.com/scriptnull/furious/blob/master/LICENSE).\r\n",
  "readmeFilename": "README.md",
  "gitHead": "a3b9534aa2ac98da66b9bf16ed6c31766bf5fb37",
  "_id": "furious@0.2.1",
  "_shasum": "3faf0af8555308f42a678ea52aaa988b23d96ce9",
  "_from": "furious@0.2.1"
}
